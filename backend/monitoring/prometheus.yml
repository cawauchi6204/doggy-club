global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    monitor: 'doggyclub-monitor'

rule_files:
  - "rules/*.yml"

alerting:
  alertmanagers:
    - static_configs:
        - targets:
          - alertmanager:9093

scrape_configs:
  # Prometheus itself
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']

  # DoggyClub Backend API
  - job_name: 'doggyclub-backend'
    metrics_path: '/metrics'
    scrape_interval: 15s
    static_configs:
      - targets: ['app:8080']
    scrape_timeout: 10s
    honor_labels: true

  # Nginx metrics (if nginx-prometheus-exporter is installed)
  - job_name: 'nginx'
    static_configs:
      - targets: ['nginx-exporter:9113']
    scrape_interval: 30s

  # PostgreSQL metrics
  - job_name: 'postgres'
    static_configs:
      - targets: ['postgres-exporter:9187']
    scrape_interval: 30s

  # Redis metrics
  - job_name: 'redis'
    static_configs:
      - targets: ['redis-exporter:9121']
    scrape_interval: 30s

  # Node/Container metrics
  - job_name: 'node'
    static_configs:
      - targets: ['node-exporter:9100']
    scrape_interval: 30s

  # Docker container metrics
  - job_name: 'cadvisor'
    static_configs:
      - targets: ['cadvisor:8080']
    scrape_interval: 30s
    metrics_path: /metrics

# Recording rules for performance optimization
# These rules pre-calculate expensive queries
- name: api_performance
  rules:
    - record: api:request_rate_5m
      expr: rate(http_requests_total[5m])
    
    - record: api:error_rate_5m
      expr: rate(http_requests_total{status=~"5.."}[5m]) / rate(http_requests_total[5m])
    
    - record: api:response_time_95p_5m
      expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m]))

- name: database_performance
  rules:
    - record: db:connection_usage
      expr: pg_stat_activity_count / pg_settings_max_connections * 100
    
    - record: db:query_rate_5m
      expr: rate(pg_stat_database_xact_commit[5m]) + rate(pg_stat_database_xact_rollback[5m])

- name: cache_performance
  rules:
    - record: redis:hit_rate_5m
      expr: rate(redis_keyspace_hits_total[5m]) / (rate(redis_keyspace_hits_total[5m]) + rate(redis_keyspace_misses_total[5m])) * 100
    
    - record: redis:memory_usage
      expr: redis_memory_used_bytes / redis_memory_max_bytes * 100